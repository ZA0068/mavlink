# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavlink_lora/mavlink_lora_set_position_target_local_ned.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mavlink_lora_set_position_target_local_ned(genpy.Message):
  _md5sum = "90cd8aa6df876fb01860f809ed461d08"
  _type = "mavlink_lora/mavlink_lora_set_position_target_local_ned"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 time_boot_ms
uint8 target_system
uint8 target_component
uint8 coordinate_frame
uint16 type_mask
float64 x
float64 y
float64 z
float64 vx
float64 vy
float64 vz
float64 afx
float64 afy
float64 afz
float64 yaw
float64 yaw_rate"""
  __slots__ = ['time_boot_ms','target_system','target_component','coordinate_frame','type_mask','x','y','z','vx','vy','vz','afx','afy','afz','yaw','yaw_rate']
  _slot_types = ['uint32','uint8','uint8','uint8','uint16','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_boot_ms,target_system,target_component,coordinate_frame,type_mask,x,y,z,vx,vy,vz,afx,afy,afz,yaw,yaw_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mavlink_lora_set_position_target_local_ned, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time_boot_ms is None:
        self.time_boot_ms = 0
      if self.target_system is None:
        self.target_system = 0
      if self.target_component is None:
        self.target_component = 0
      if self.coordinate_frame is None:
        self.coordinate_frame = 0
      if self.type_mask is None:
        self.type_mask = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.afx is None:
        self.afx = 0.
      if self.afy is None:
        self.afy = 0.
      if self.afz is None:
        self.afz = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
    else:
      self.time_boot_ms = 0
      self.target_system = 0
      self.target_component = 0
      self.coordinate_frame = 0
      self.type_mask = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.
      self.afx = 0.
      self.afy = 0.
      self.afz = 0.
      self.yaw = 0.
      self.yaw_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I3BH11d().pack(_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 97
      (_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate,) = _get_struct_I3BH11d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I3BH11d().pack(_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 97
      (_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate,) = _get_struct_I3BH11d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I3BH11d = None
def _get_struct_I3BH11d():
    global _struct_I3BH11d
    if _struct_I3BH11d is None:
        _struct_I3BH11d = struct.Struct("<I3BH11d")
    return _struct_I3BH11d
