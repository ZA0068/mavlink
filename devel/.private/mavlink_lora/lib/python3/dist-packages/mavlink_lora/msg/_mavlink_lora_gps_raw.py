# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavlink_lora/mavlink_lora_gps_raw.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mavlink_lora_gps_raw(genpy.Message):
  _md5sum = "7afea41e45851f2ca34fca3f97c2d64d"
  _type = "mavlink_lora/mavlink_lora_gps_raw"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 time_usec
uint8 fix_type
float64 lat
float64 lon
float64 alt
uint16 eph
uint16 epv
float64 vel
float64 cog
uint8 satellites_visible"""
  __slots__ = ['time_usec','fix_type','lat','lon','alt','eph','epv','vel','cog','satellites_visible']
  _slot_types = ['uint64','uint8','float64','float64','float64','uint16','uint16','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_usec,fix_type,lat,lon,alt,eph,epv,vel,cog,satellites_visible

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mavlink_lora_gps_raw, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time_usec is None:
        self.time_usec = 0
      if self.fix_type is None:
        self.fix_type = 0
      if self.lat is None:
        self.lat = 0.
      if self.lon is None:
        self.lon = 0.
      if self.alt is None:
        self.alt = 0.
      if self.eph is None:
        self.eph = 0
      if self.epv is None:
        self.epv = 0
      if self.vel is None:
        self.vel = 0.
      if self.cog is None:
        self.cog = 0.
      if self.satellites_visible is None:
        self.satellites_visible = 0
    else:
      self.time_usec = 0
      self.fix_type = 0
      self.lat = 0.
      self.lon = 0.
      self.alt = 0.
      self.eph = 0
      self.epv = 0
      self.vel = 0.
      self.cog = 0.
      self.satellites_visible = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QB3d2H2dB().pack(_x.time_usec, _x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 54
      (_x.time_usec, _x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible,) = _get_struct_QB3d2H2dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QB3d2H2dB().pack(_x.time_usec, _x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 54
      (_x.time_usec, _x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible,) = _get_struct_QB3d2H2dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_QB3d2H2dB = None
def _get_struct_QB3d2H2dB():
    global _struct_QB3d2H2dB
    if _struct_QB3d2H2dB is None:
        _struct_QB3d2H2dB = struct.Struct("<QB3d2H2dB")
    return _struct_QB3d2H2dB
