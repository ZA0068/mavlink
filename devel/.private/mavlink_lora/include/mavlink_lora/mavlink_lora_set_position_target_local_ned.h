// Generated by gencpp from file mavlink_lora/mavlink_lora_set_position_target_local_ned.msg
// DO NOT EDIT!


#ifndef MAVLINK_LORA_MESSAGE_MAVLINK_LORA_SET_POSITION_TARGET_LOCAL_NED_H
#define MAVLINK_LORA_MESSAGE_MAVLINK_LORA_SET_POSITION_TARGET_LOCAL_NED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_lora
{
template <class ContainerAllocator>
struct mavlink_lora_set_position_target_local_ned_
{
  typedef mavlink_lora_set_position_target_local_ned_<ContainerAllocator> Type;

  mavlink_lora_set_position_target_local_ned_()
    : time_boot_ms(0)
    , target_system(0)
    , target_component(0)
    , coordinate_frame(0)
    , type_mask(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , afx(0.0)
    , afy(0.0)
    , afz(0.0)
    , yaw(0.0)
    , yaw_rate(0.0)  {
    }
  mavlink_lora_set_position_target_local_ned_(const ContainerAllocator& _alloc)
    : time_boot_ms(0)
    , target_system(0)
    , target_component(0)
    , coordinate_frame(0)
    , type_mask(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , afx(0.0)
    , afy(0.0)
    , afz(0.0)
    , yaw(0.0)
    , yaw_rate(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _time_boot_ms_type;
  _time_boot_ms_type time_boot_ms;

   typedef uint8_t _target_system_type;
  _target_system_type target_system;

   typedef uint8_t _target_component_type;
  _target_component_type target_component;

   typedef uint8_t _coordinate_frame_type;
  _coordinate_frame_type coordinate_frame;

   typedef uint16_t _type_mask_type;
  _type_mask_type type_mask;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _vz_type;
  _vz_type vz;

   typedef double _afx_type;
  _afx_type afx;

   typedef double _afy_type;
  _afy_type afy;

   typedef double _afz_type;
  _afz_type afz;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;





  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_lora_set_position_target_local_ned_

typedef ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<std::allocator<void> > mavlink_lora_set_position_target_local_ned;

typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_set_position_target_local_ned > mavlink_lora_set_position_target_local_nedPtr;
typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_set_position_target_local_ned const> mavlink_lora_set_position_target_local_nedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator2> & rhs)
{
  return lhs.time_boot_ms == rhs.time_boot_ms &&
    lhs.target_system == rhs.target_system &&
    lhs.target_component == rhs.target_component &&
    lhs.coordinate_frame == rhs.coordinate_frame &&
    lhs.type_mask == rhs.type_mask &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.afx == rhs.afx &&
    lhs.afy == rhs.afy &&
    lhs.afz == rhs.afz &&
    lhs.yaw == rhs.yaw &&
    lhs.yaw_rate == rhs.yaw_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_lora

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90cd8aa6df876fb01860f809ed461d08";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90cd8aa6df876fb0ULL;
  static const uint64_t static_value2 = 0x1860f809ed461d08ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_lora/mavlink_lora_set_position_target_local_ned";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 time_boot_ms\n"
"uint8 target_system\n"
"uint8 target_component\n"
"uint8 coordinate_frame\n"
"uint16 type_mask\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 vx\n"
"float64 vy\n"
"float64 vz\n"
"float64 afx\n"
"float64 afy\n"
"float64 afz\n"
"float64 yaw\n"
"float64 yaw_rate\n"
;
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_boot_ms);
      stream.next(m.target_system);
      stream.next(m.target_component);
      stream.next(m.coordinate_frame);
      stream.next(m.type_mask);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.afx);
      stream.next(m.afy);
      stream.next(m.afz);
      stream.next(m.yaw);
      stream.next(m.yaw_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_lora_set_position_target_local_ned_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_lora::mavlink_lora_set_position_target_local_ned_<ContainerAllocator>& v)
  {
    s << indent << "time_boot_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_boot_ms);
    s << indent << "target_system: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_system);
    s << indent << "target_component: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_component);
    s << indent << "coordinate_frame: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.coordinate_frame);
    s << indent << "type_mask: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.type_mask);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<double>::stream(s, indent + "  ", v.vz);
    s << indent << "afx: ";
    Printer<double>::stream(s, indent + "  ", v.afx);
    s << indent << "afy: ";
    Printer<double>::stream(s, indent + "  ", v.afy);
    s << indent << "afz: ";
    Printer<double>::stream(s, indent + "  ", v.afz);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_LORA_MESSAGE_MAVLINK_LORA_SET_POSITION_TARGET_LOCAL_NED_H
