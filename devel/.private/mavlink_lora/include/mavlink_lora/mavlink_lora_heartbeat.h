// Generated by gencpp from file mavlink_lora/mavlink_lora_heartbeat.msg
// DO NOT EDIT!


#ifndef MAVLINK_LORA_MESSAGE_MAVLINK_LORA_HEARTBEAT_H
#define MAVLINK_LORA_MESSAGE_MAVLINK_LORA_HEARTBEAT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_lora
{
template <class ContainerAllocator>
struct mavlink_lora_heartbeat_
{
  typedef mavlink_lora_heartbeat_<ContainerAllocator> Type;

  mavlink_lora_heartbeat_()
    : type(0)
    , autopilot(0)
    , base_mode(0)
    , custom_mode(0)
    , system_status(0)
    , system_id(0)  {
    }
  mavlink_lora_heartbeat_(const ContainerAllocator& _alloc)
    : type(0)
    , autopilot(0)
    , base_mode(0)
    , custom_mode(0)
    , system_status(0)
    , system_id(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _autopilot_type;
  _autopilot_type autopilot;

   typedef uint8_t _base_mode_type;
  _base_mode_type base_mode;

   typedef uint32_t _custom_mode_type;
  _custom_mode_type custom_mode;

   typedef uint8_t _system_status_type;
  _system_status_type system_status;

   typedef uint8_t _system_id_type;
  _system_id_type system_id;





  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_lora_heartbeat_

typedef ::mavlink_lora::mavlink_lora_heartbeat_<std::allocator<void> > mavlink_lora_heartbeat;

typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_heartbeat > mavlink_lora_heartbeatPtr;
typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_heartbeat const> mavlink_lora_heartbeatConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.autopilot == rhs.autopilot &&
    lhs.base_mode == rhs.base_mode &&
    lhs.custom_mode == rhs.custom_mode &&
    lhs.system_status == rhs.system_status &&
    lhs.system_id == rhs.system_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_lora

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb6c018f35a538ffe1179b637866562f";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb6c018f35a538ffULL;
  static const uint64_t static_value2 = 0xe1179b637866562fULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_lora/mavlink_lora_heartbeat";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 type\n"
"uint8 autopilot\n"
"uint8 base_mode\n"
"uint32 custom_mode\n"
"uint8 system_status\n"
"uint8 system_id\n"
;
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.autopilot);
      stream.next(m.base_mode);
      stream.next(m.custom_mode);
      stream.next(m.system_status);
      stream.next(m.system_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_lora_heartbeat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_lora::mavlink_lora_heartbeat_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "autopilot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autopilot);
    s << indent << "base_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.base_mode);
    s << indent << "custom_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.custom_mode);
    s << indent << "system_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_status);
    s << indent << "system_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_LORA_MESSAGE_MAVLINK_LORA_HEARTBEAT_H
