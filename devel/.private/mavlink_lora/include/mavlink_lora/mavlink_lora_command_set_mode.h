// Generated by gencpp from file mavlink_lora/mavlink_lora_command_set_mode.msg
// DO NOT EDIT!


#ifndef MAVLINK_LORA_MESSAGE_MAVLINK_LORA_COMMAND_SET_MODE_H
#define MAVLINK_LORA_MESSAGE_MAVLINK_LORA_COMMAND_SET_MODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_lora
{
template <class ContainerAllocator>
struct mavlink_lora_command_set_mode_
{
  typedef mavlink_lora_command_set_mode_<ContainerAllocator> Type;

  mavlink_lora_command_set_mode_()
    : mode(0.0)
    , custom_mode(0.0)
    , custom_sub_mode(0.0)  {
    }
  mavlink_lora_command_set_mode_(const ContainerAllocator& _alloc)
    : mode(0.0)
    , custom_mode(0.0)
    , custom_sub_mode(0.0)  {
  (void)_alloc;
    }



   typedef double _mode_type;
  _mode_type mode;

   typedef double _custom_mode_type;
  _custom_mode_type custom_mode;

   typedef double _custom_sub_mode_type;
  _custom_sub_mode_type custom_sub_mode;





  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_lora_command_set_mode_

typedef ::mavlink_lora::mavlink_lora_command_set_mode_<std::allocator<void> > mavlink_lora_command_set_mode;

typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_set_mode > mavlink_lora_command_set_modePtr;
typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_set_mode const> mavlink_lora_command_set_modeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.custom_mode == rhs.custom_mode &&
    lhs.custom_sub_mode == rhs.custom_sub_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_lora

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da98e2819d970e24304003e95747a815";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda98e2819d970e24ULL;
  static const uint64_t static_value2 = 0x304003e95747a815ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_lora/mavlink_lora_command_set_mode";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 mode\n"
"float64 custom_mode\n"
"float64 custom_sub_mode\n"
;
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.custom_mode);
      stream.next(m.custom_sub_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_lora_command_set_mode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_lora::mavlink_lora_command_set_mode_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<double>::stream(s, indent + "  ", v.mode);
    s << indent << "custom_mode: ";
    Printer<double>::stream(s, indent + "  ", v.custom_mode);
    s << indent << "custom_sub_mode: ";
    Printer<double>::stream(s, indent + "  ", v.custom_sub_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_LORA_MESSAGE_MAVLINK_LORA_COMMAND_SET_MODE_H
