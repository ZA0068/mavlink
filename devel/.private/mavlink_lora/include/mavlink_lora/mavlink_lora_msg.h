// Generated by gencpp from file mavlink_lora/mavlink_lora_msg.msg
// DO NOT EDIT!


#ifndef MAVLINK_LORA_MESSAGE_MAVLINK_LORA_MSG_H
#define MAVLINK_LORA_MESSAGE_MAVLINK_LORA_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavlink_lora
{
template <class ContainerAllocator>
struct mavlink_lora_msg_
{
  typedef mavlink_lora_msg_<ContainerAllocator> Type;

  mavlink_lora_msg_()
    : header()
    , payload_len(0)
    , seq(0)
    , sys_id(0)
    , comp_id(0)
    , msg_id(0)
    , payload()
    , checksum(0)  {
    }
  mavlink_lora_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , payload_len(0)
    , seq(0)
    , sys_id(0)
    , comp_id(0)
    , msg_id(0)
    , payload(_alloc)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _payload_len_type;
  _payload_len_type payload_len;

   typedef uint8_t _seq_type;
  _seq_type seq;

   typedef uint8_t _sys_id_type;
  _sys_id_type sys_id;

   typedef uint8_t _comp_id_type;
  _comp_id_type comp_id;

   typedef uint32_t _msg_id_type;
  _msg_id_type msg_id;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _payload_type;
  _payload_type payload;

   typedef uint16_t _checksum_type;
  _checksum_type checksum;





  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_lora_msg_

typedef ::mavlink_lora::mavlink_lora_msg_<std::allocator<void> > mavlink_lora_msg;

typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_msg > mavlink_lora_msgPtr;
typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_msg const> mavlink_lora_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.payload_len == rhs.payload_len &&
    lhs.seq == rhs.seq &&
    lhs.sys_id == rhs.sys_id &&
    lhs.comp_id == rhs.comp_id &&
    lhs.msg_id == rhs.msg_id &&
    lhs.payload == rhs.payload &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_lora

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "120cf225394fbebe4f78a7c5431f668a";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x120cf225394fbebeULL;
  static const uint64_t static_value2 = 0x4f78a7c5431f668aULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_lora/mavlink_lora_msg";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 payload_len\n"
"uint8 seq\n"
"uint8 sys_id\n"
"uint8 comp_id\n"
"uint32 msg_id\n"
"uint8[] payload\n"
"uint16 checksum\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.payload_len);
      stream.next(m.seq);
      stream.next(m.sys_id);
      stream.next(m.comp_id);
      stream.next(m.msg_id);
      stream.next(m.payload);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_lora_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_lora::mavlink_lora_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "payload_len: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.payload_len);
    s << indent << "seq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.seq);
    s << indent << "sys_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sys_id);
    s << indent << "comp_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.comp_id);
    s << indent << "msg_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_id);
    s << indent << "payload[]" << std::endl;
    for (size_t i = 0; i < v.payload.size(); ++i)
    {
      s << indent << "  payload[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.payload[i]);
    }
    s << indent << "checksum: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_LORA_MESSAGE_MAVLINK_LORA_MSG_H
