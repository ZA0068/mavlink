// Generated by gencpp from file mavlink_lora/mavlink_lora_mission_item_int.msg
// DO NOT EDIT!


#ifndef MAVLINK_LORA_MESSAGE_MAVLINK_LORA_MISSION_ITEM_INT_H
#define MAVLINK_LORA_MESSAGE_MAVLINK_LORA_MISSION_ITEM_INT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_lora
{
template <class ContainerAllocator>
struct mavlink_lora_mission_item_int_
{
  typedef mavlink_lora_mission_item_int_<ContainerAllocator> Type;

  mavlink_lora_mission_item_int_()
    : param1(0.0)
    , param2(0.0)
    , param3(0.0)
    , param4(0.0)
    , x(0)
    , y(0)
    , z(0.0)
    , seq(0)
    , command(0)
    , target_system(0)
    , target_component(0)
    , frame(0)
    , current(0)
    , autocontinue(0)  {
    }
  mavlink_lora_mission_item_int_(const ContainerAllocator& _alloc)
    : param1(0.0)
    , param2(0.0)
    , param3(0.0)
    , param4(0.0)
    , x(0)
    , y(0)
    , z(0.0)
    , seq(0)
    , command(0)
    , target_system(0)
    , target_component(0)
    , frame(0)
    , current(0)
    , autocontinue(0)  {
  (void)_alloc;
    }



   typedef double _param1_type;
  _param1_type param1;

   typedef double _param2_type;
  _param2_type param2;

   typedef double _param3_type;
  _param3_type param3;

   typedef double _param4_type;
  _param4_type param4;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef uint16_t _seq_type;
  _seq_type seq;

   typedef uint16_t _command_type;
  _command_type command;

   typedef uint8_t _target_system_type;
  _target_system_type target_system;

   typedef uint8_t _target_component_type;
  _target_component_type target_component;

   typedef uint8_t _frame_type;
  _frame_type frame;

   typedef uint8_t _current_type;
  _current_type current;

   typedef uint8_t _autocontinue_type;
  _autocontinue_type autocontinue;





  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_lora_mission_item_int_

typedef ::mavlink_lora::mavlink_lora_mission_item_int_<std::allocator<void> > mavlink_lora_mission_item_int;

typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_mission_item_int > mavlink_lora_mission_item_intPtr;
typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_mission_item_int const> mavlink_lora_mission_item_intConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator2> & rhs)
{
  return lhs.param1 == rhs.param1 &&
    lhs.param2 == rhs.param2 &&
    lhs.param3 == rhs.param3 &&
    lhs.param4 == rhs.param4 &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.seq == rhs.seq &&
    lhs.command == rhs.command &&
    lhs.target_system == rhs.target_system &&
    lhs.target_component == rhs.target_component &&
    lhs.frame == rhs.frame &&
    lhs.current == rhs.current &&
    lhs.autocontinue == rhs.autocontinue;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_lora

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> >
{
  static const char* value()
  {
    return "784b321495d46ff41f0090cf7750bfb2";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x784b321495d46ff4ULL;
  static const uint64_t static_value2 = 0x1f0090cf7750bfb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_lora/mavlink_lora_mission_item_int";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 param1\n"
"float64 param2\n"
"float64 param3\n"
"float64 param4\n"
"int32 x\n"
"int32 y\n"
"float64 z\n"
"uint16 seq\n"
"uint16 command\n"
"uint8 target_system\n"
"uint8 target_component\n"
"uint8 frame\n"
"uint8 current\n"
"uint8 autocontinue\n"
;
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.param1);
      stream.next(m.param2);
      stream.next(m.param3);
      stream.next(m.param4);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.seq);
      stream.next(m.command);
      stream.next(m.target_system);
      stream.next(m.target_component);
      stream.next(m.frame);
      stream.next(m.current);
      stream.next(m.autocontinue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_lora_mission_item_int_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_lora::mavlink_lora_mission_item_int_<ContainerAllocator>& v)
  {
    s << indent << "param1: ";
    Printer<double>::stream(s, indent + "  ", v.param1);
    s << indent << "param2: ";
    Printer<double>::stream(s, indent + "  ", v.param2);
    s << indent << "param3: ";
    Printer<double>::stream(s, indent + "  ", v.param3);
    s << indent << "param4: ";
    Printer<double>::stream(s, indent + "  ", v.param4);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "seq: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.seq);
    s << indent << "command: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.command);
    s << indent << "target_system: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_system);
    s << indent << "target_component: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_component);
    s << indent << "frame: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frame);
    s << indent << "current: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current);
    s << indent << "autocontinue: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autocontinue);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_LORA_MESSAGE_MAVLINK_LORA_MISSION_ITEM_INT_H
