// Generated by gencpp from file mavlink_lora/mavlink_lora_status.msg
// DO NOT EDIT!


#ifndef MAVLINK_LORA_MESSAGE_MAVLINK_LORA_STATUS_H
#define MAVLINK_LORA_MESSAGE_MAVLINK_LORA_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavlink_lora
{
template <class ContainerAllocator>
struct mavlink_lora_status_
{
  typedef mavlink_lora_status_<ContainerAllocator> Type;

  mavlink_lora_status_()
    : header()
    , last_heard()
    , last_heard_sys_status()
    , batt_volt(0)
    , cpu_load(0)
    , batt_remaining(0)
    , msg_sent_gcs(0)
    , msg_received_gcs(0)
    , msg_dropped_gcs(0)
    , msg_dropped_uas(0)  {
    }
  mavlink_lora_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , last_heard()
    , last_heard_sys_status()
    , batt_volt(0)
    , cpu_load(0)
    , batt_remaining(0)
    , msg_sent_gcs(0)
    , msg_received_gcs(0)
    , msg_dropped_gcs(0)
    , msg_dropped_uas(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _last_heard_type;
  _last_heard_type last_heard;

   typedef ros::Time _last_heard_sys_status_type;
  _last_heard_sys_status_type last_heard_sys_status;

   typedef uint16_t _batt_volt_type;
  _batt_volt_type batt_volt;

   typedef uint16_t _cpu_load_type;
  _cpu_load_type cpu_load;

   typedef int8_t _batt_remaining_type;
  _batt_remaining_type batt_remaining;

   typedef uint32_t _msg_sent_gcs_type;
  _msg_sent_gcs_type msg_sent_gcs;

   typedef uint32_t _msg_received_gcs_type;
  _msg_received_gcs_type msg_received_gcs;

   typedef uint32_t _msg_dropped_gcs_type;
  _msg_dropped_gcs_type msg_dropped_gcs;

   typedef uint32_t _msg_dropped_uas_type;
  _msg_dropped_uas_type msg_dropped_uas;





  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_lora_status_

typedef ::mavlink_lora::mavlink_lora_status_<std::allocator<void> > mavlink_lora_status;

typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_status > mavlink_lora_statusPtr;
typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_status const> mavlink_lora_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_lora::mavlink_lora_status_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.last_heard == rhs.last_heard &&
    lhs.last_heard_sys_status == rhs.last_heard_sys_status &&
    lhs.batt_volt == rhs.batt_volt &&
    lhs.cpu_load == rhs.cpu_load &&
    lhs.batt_remaining == rhs.batt_remaining &&
    lhs.msg_sent_gcs == rhs.msg_sent_gcs &&
    lhs.msg_received_gcs == rhs.msg_received_gcs &&
    lhs.msg_dropped_gcs == rhs.msg_dropped_gcs &&
    lhs.msg_dropped_uas == rhs.msg_dropped_uas;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_lora::mavlink_lora_status_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_lora

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06982f39fc78bcc6472ae00b3aa4d346";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06982f39fc78bcc6ULL;
  static const uint64_t static_value2 = 0x472ae00b3aa4d346ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_lora/mavlink_lora_status";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"time last_heard\n"
"time last_heard_sys_status\n"
"uint16 batt_volt\n"
"uint16 cpu_load\n"
"int8 batt_remaining\n"
"\n"
"uint32 msg_sent_gcs\n"
"uint32 msg_received_gcs\n"
"uint32 msg_dropped_gcs\n"
"uint32 msg_dropped_uas\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.last_heard);
      stream.next(m.last_heard_sys_status);
      stream.next(m.batt_volt);
      stream.next(m.cpu_load);
      stream.next(m.batt_remaining);
      stream.next(m.msg_sent_gcs);
      stream.next(m.msg_received_gcs);
      stream.next(m.msg_dropped_gcs);
      stream.next(m.msg_dropped_uas);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_lora_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_lora::mavlink_lora_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_lora::mavlink_lora_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "last_heard: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_heard);
    s << indent << "last_heard_sys_status: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_heard_sys_status);
    s << indent << "batt_volt: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.batt_volt);
    s << indent << "cpu_load: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cpu_load);
    s << indent << "batt_remaining: ";
    Printer<int8_t>::stream(s, indent + "  ", v.batt_remaining);
    s << indent << "msg_sent_gcs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_sent_gcs);
    s << indent << "msg_received_gcs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_received_gcs);
    s << indent << "msg_dropped_gcs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_dropped_gcs);
    s << indent << "msg_dropped_uas: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_dropped_uas);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_LORA_MESSAGE_MAVLINK_LORA_STATUS_H
