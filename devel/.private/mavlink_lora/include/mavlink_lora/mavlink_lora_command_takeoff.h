// Generated by gencpp from file mavlink_lora/mavlink_lora_command_takeoff.msg
// DO NOT EDIT!


#ifndef MAVLINK_LORA_MESSAGE_MAVLINK_LORA_COMMAND_TAKEOFF_H
#define MAVLINK_LORA_MESSAGE_MAVLINK_LORA_COMMAND_TAKEOFF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_lora
{
template <class ContainerAllocator>
struct mavlink_lora_command_takeoff_
{
  typedef mavlink_lora_command_takeoff_<ContainerAllocator> Type;

  mavlink_lora_command_takeoff_()
    : pitch(0.0)
    , yaw_angle(0.0)
    , lat(0.0)
    , lon(0.0)
    , alt(0.0)  {
    }
  mavlink_lora_command_takeoff_(const ContainerAllocator& _alloc)
    : pitch(0.0)
    , yaw_angle(0.0)
    , lat(0.0)
    , lon(0.0)
    , alt(0.0)  {
  (void)_alloc;
    }



   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _alt_type;
  _alt_type alt;





  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_lora_command_takeoff_

typedef ::mavlink_lora::mavlink_lora_command_takeoff_<std::allocator<void> > mavlink_lora_command_takeoff;

typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_takeoff > mavlink_lora_command_takeoffPtr;
typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_takeoff const> mavlink_lora_command_takeoffConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator2> & rhs)
{
  return lhs.pitch == rhs.pitch &&
    lhs.yaw_angle == rhs.yaw_angle &&
    lhs.lat == rhs.lat &&
    lhs.lon == rhs.lon &&
    lhs.alt == rhs.alt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_lora

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "194827fe444b1623ec4c3832aa38096a";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x194827fe444b1623ULL;
  static const uint64_t static_value2 = 0xec4c3832aa38096aULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_lora/mavlink_lora_command_takeoff";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 pitch\n"
"float64 yaw_angle\n"
"float64 lat\n"
"float64 lon\n"
"float64 alt\n"
;
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.yaw_angle);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.alt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_lora_command_takeoff_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_lora::mavlink_lora_command_takeoff_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw_angle: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "alt: ";
    Printer<double>::stream(s, indent + "  ", v.alt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_LORA_MESSAGE_MAVLINK_LORA_COMMAND_TAKEOFF_H
