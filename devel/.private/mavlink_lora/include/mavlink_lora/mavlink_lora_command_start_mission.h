// Generated by gencpp from file mavlink_lora/mavlink_lora_command_start_mission.msg
// DO NOT EDIT!


#ifndef MAVLINK_LORA_MESSAGE_MAVLINK_LORA_COMMAND_START_MISSION_H
#define MAVLINK_LORA_MESSAGE_MAVLINK_LORA_COMMAND_START_MISSION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_lora
{
template <class ContainerAllocator>
struct mavlink_lora_command_start_mission_
{
  typedef mavlink_lora_command_start_mission_<ContainerAllocator> Type;

  mavlink_lora_command_start_mission_()
    : first_item(0.0)
    , last_item(0.0)  {
    }
  mavlink_lora_command_start_mission_(const ContainerAllocator& _alloc)
    : first_item(0.0)
    , last_item(0.0)  {
  (void)_alloc;
    }



   typedef double _first_item_type;
  _first_item_type first_item;

   typedef double _last_item_type;
  _last_item_type last_item;





  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_lora_command_start_mission_

typedef ::mavlink_lora::mavlink_lora_command_start_mission_<std::allocator<void> > mavlink_lora_command_start_mission;

typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_start_mission > mavlink_lora_command_start_missionPtr;
typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_command_start_mission const> mavlink_lora_command_start_missionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator2> & rhs)
{
  return lhs.first_item == rhs.first_item &&
    lhs.last_item == rhs.last_item;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_lora

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6332a118f38eb9719c1f7f9fd9ec24c";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6332a118f38eb97ULL;
  static const uint64_t static_value2 = 0x19c1f7f9fd9ec24cULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_lora/mavlink_lora_command_start_mission";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 first_item\n"
"float64 last_item\n"
;
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.first_item);
      stream.next(m.last_item);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_lora_command_start_mission_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_lora::mavlink_lora_command_start_mission_<ContainerAllocator>& v)
  {
    s << indent << "first_item: ";
    Printer<double>::stream(s, indent + "  ", v.first_item);
    s << indent << "last_item: ";
    Printer<double>::stream(s, indent + "  ", v.last_item);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_LORA_MESSAGE_MAVLINK_LORA_COMMAND_START_MISSION_H
