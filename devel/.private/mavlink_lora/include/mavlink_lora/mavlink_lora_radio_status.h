// Generated by gencpp from file mavlink_lora/mavlink_lora_radio_status.msg
// DO NOT EDIT!


#ifndef MAVLINK_LORA_MESSAGE_MAVLINK_LORA_RADIO_STATUS_H
#define MAVLINK_LORA_MESSAGE_MAVLINK_LORA_RADIO_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_lora
{
template <class ContainerAllocator>
struct mavlink_lora_radio_status_
{
  typedef mavlink_lora_radio_status_<ContainerAllocator> Type;

  mavlink_lora_radio_status_()
    : rssi(0)
    , remrssi(0)
    , txbuf(0)
    , noise(0)
    , remnoise(0)
    , rxerrors(0)
    , fixed(0)  {
    }
  mavlink_lora_radio_status_(const ContainerAllocator& _alloc)
    : rssi(0)
    , remrssi(0)
    , txbuf(0)
    , noise(0)
    , remnoise(0)
    , rxerrors(0)
    , fixed(0)  {
  (void)_alloc;
    }



   typedef int8_t _rssi_type;
  _rssi_type rssi;

   typedef int8_t _remrssi_type;
  _remrssi_type remrssi;

   typedef uint8_t _txbuf_type;
  _txbuf_type txbuf;

   typedef uint8_t _noise_type;
  _noise_type noise;

   typedef uint8_t _remnoise_type;
  _remnoise_type remnoise;

   typedef uint16_t _rxerrors_type;
  _rxerrors_type rxerrors;

   typedef uint16_t _fixed_type;
  _fixed_type fixed;





  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_lora_radio_status_

typedef ::mavlink_lora::mavlink_lora_radio_status_<std::allocator<void> > mavlink_lora_radio_status;

typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_radio_status > mavlink_lora_radio_statusPtr;
typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_radio_status const> mavlink_lora_radio_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator2> & rhs)
{
  return lhs.rssi == rhs.rssi &&
    lhs.remrssi == rhs.remrssi &&
    lhs.txbuf == rhs.txbuf &&
    lhs.noise == rhs.noise &&
    lhs.remnoise == rhs.remnoise &&
    lhs.rxerrors == rhs.rxerrors &&
    lhs.fixed == rhs.fixed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator1> & lhs, const ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_lora

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d652cc5b05559e196e4dd9ea309ddb4b";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd652cc5b05559e19ULL;
  static const uint64_t static_value2 = 0x6e4dd9ea309ddb4bULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_lora/mavlink_lora_radio_status";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 rssi\n"
"int8 remrssi\n"
"uint8 txbuf\n"
"uint8 noise\n"
"uint8 remnoise\n"
"uint16 rxerrors\n"
"uint16 fixed\n"
;
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rssi);
      stream.next(m.remrssi);
      stream.next(m.txbuf);
      stream.next(m.noise);
      stream.next(m.remnoise);
      stream.next(m.rxerrors);
      stream.next(m.fixed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_lora_radio_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_lora::mavlink_lora_radio_status_<ContainerAllocator>& v)
  {
    s << indent << "rssi: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rssi);
    s << indent << "remrssi: ";
    Printer<int8_t>::stream(s, indent + "  ", v.remrssi);
    s << indent << "txbuf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.txbuf);
    s << indent << "noise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.noise);
    s << indent << "remnoise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remnoise);
    s << indent << "rxerrors: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rxerrors);
    s << indent << "fixed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.fixed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_LORA_MESSAGE_MAVLINK_LORA_RADIO_STATUS_H
